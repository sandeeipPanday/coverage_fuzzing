import sys
import os
import atheris
import importlib.util
import json
import traceback
import time

LOG_FILE = "fuzz_log.jsonl"
FUNC_LIST_FILE = "function_list.json"
CORPUS_DIR = "corpus"

MAX_EXECUTIONS = 5000
MAX_CORPUS_FILES = 1000
MAX_LEN = 1024  # Limit fuzzed input size (bytes)

EXCLUDED_PREFIXES = ["upload_", "send_file", "uploadfile", "upload"]
exec_counter = [0]

def load_function(file_path, function_name):
    try:
        mod_name = os.path.splitext(os.path.basename(file_path))[0]
        full_path = os.path.join("api", file_path)
        spec = importlib.util.spec_from_file_location(mod_name, full_path)
        module = importlib.util.module_from_spec(spec)
        spec.loader.exec_module(module)
        return getattr(module, function_name)
    except Exception:
        traceback.print_exc()
        return None

def should_exclude(func_name):
    name = func_name.lower()
    return any(name.startswith(prefix) for prefix in EXCLUDED_PREFIXES)

def build_targets():
    if not os.path.exists(FUNC_LIST_FILE):
        print("‚ùå Run detect_functions.py first.")
        sys.exit(1)
    with open(FUNC_LIST_FILE) as f:
        entries = json.load(f)
    targets = []
    for entry in entries:
        if should_exclude(entry["function"]):
            continue
        func = load_function(entry["file"], entry["function"])
        if func:
            targets.append({"func": func, "info": entry})
    return targets

def log_crash(info, data, error):
    crash = {
        "file": info["file"],
        "function": info["function"],
        "input": repr(data),
        "error": str(error)
    }
    with open(LOG_FILE, "a", encoding="utf-8") as f:
        f.write(json.dumps(crash) + "\n")

    if not os.path.exists(CORPUS_DIR):
        os.makedirs(CORPUS_DIR)
    if len(os.listdir(CORPUS_DIR)) >= MAX_CORPUS_FILES:
        return
    ts = int(time.time() * 1000)
    with open(os.path.join(CORPUS_DIR, f"crash_{ts}.input"), "wb") as f:
        f.write(data)

def TestOneInput(data):
    exec_counter[0] += 1
    if exec_counter[0] > MAX_EXECUTIONS:
        print(f"\nüõë Stopping after {MAX_EXECUTIONS} fuzzing attempts.")
        os._exit(0)

    if len(data) > MAX_LEN:
        return

    try:
        decoded = data.decode("utf-8", errors="ignore")
    except Exception:
        return

    for target in targets:
        try:
            start = time.perf_counter()
            target["func"](decoded)
            elapsed = time.perf_counter() - start
            if elapsed > 0.5:
                log_crash(target["info"], data, f"‚ö†Ô∏è Slow execution: {elapsed:.3f}s")
        except Exception as e:
            log_crash(target["info"], data, e)

if __name__ == "__main__":
    open(LOG_FILE, "w").close()
    if not os.path.exists(CORPUS_DIR):
        os.makedirs(CORPUS_DIR)

    targets = build_targets()
    print(f"üî¨ Fuzzing {len(targets)} functions with max_len={MAX_LEN}, max_runs={MAX_EXECUTIONS}, max_corpus_files={MAX_CORPUS_FILES}")

    atheris.Setup([sys.argv[0], CORPUS_DIR], TestOneInput, enable_python_coverage=True)
    atheris.Fuzz()
